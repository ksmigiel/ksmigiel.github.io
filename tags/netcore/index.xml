<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Netcore on </title>
    <link>http://ksmigiel.com/tags/netcore/</link>
    <description>Recent content in Netcore on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 18 Jan 2018 13:13:09 +0000</lastBuildDate>
    
	<atom:link href="http://ksmigiel.com/tags/netcore/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Aplikacja konsolowa w .NET Core</title>
      <link>http://ksmigiel.com/2018/01/netcore-console/</link>
      <pubDate>Thu, 18 Jan 2018 13:13:09 +0000</pubDate>
      
      <guid>http://ksmigiel.com/2018/01/netcore-console/</guid>
      <description>Zapewne dla tych, którzy mieli styczność z frameworkiem ASP.NET Core zagadnienia takie jak pliki konfiguracyjne projektu, logowanie zdrarzeń i dependency injection nie są żadną nowością. Cała filozofia nowego ASP.NET opiera się na DI i modułowości, a większość poradników właśnie od tego zaczyna.
Ponieważ ostatnio dużo eksperymentuję z .NET Core i Visual Studio Code postanowiłem sprawdzić, czy klasy używane w ASP.NET Core są re-używalne w aplikacji konsolowej.
Okazuje się, że istnieje skończona kombinacja paczek NuGet&amp;rsquo;owych pozwalająca uzyskać taką samą funkcjonalność - zawdzięczamy to architekturze ASP.</description>
    </item>
    
  </channel>
</rss>