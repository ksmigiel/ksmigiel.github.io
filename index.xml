<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://ksmigiel.com/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 25 Sep 2015 17:26:38 +0200</lastBuildDate>
    <atom:link href="http://ksmigiel.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kulisy DevTalka cz. 1</title>
      <link>http://ksmigiel.com/2015/09/devtalk-cz1</link>
      <pubDate>Fri, 25 Sep 2015 17:26:38 +0200</pubDate>
      
      <guid>http://ksmigiel.com/2015/09/devtalk-cz1</guid>
      <description>

&lt;p&gt;Tak jak obiecywałem w poprzednim poście - nadszedł moment na podsumowanie ubiegłego roku podcastowego. Z perspektywy czasu żałuję, że nie prowadziłem szczegółowych statystyk (chociażby takich jak sumaryczny czas spędzony w edytorze audio), ale postaram się to jakoś poglądowo wyestymować :).&lt;/p&gt;

&lt;p&gt;W części pierwszej opiszę sprzęt z jakiego korzystałem z krótkim opisem co to jest (szczególnie dla czytelników niezaznajomionych z branżą pro-audio).
W części drugiej postaram się krótko, lecz treściwie przedstawić proces produkcji odcinka podcasta (załadowanie ścieżek, wyrównanie poziomów głośności i normalizacja, efekty - (odszumianie, equalizacja, kompresja), edycja, mastering i render).&lt;/p&gt;

&lt;h2 id=&#34;hardware:dce4ce542c9f7a851fd046a02392be71&#34;&gt;Hardware&lt;/h2&gt;

&lt;p&gt;Zdążyłem się już pochwalić nowym sprzętem, a drugi raz pochwalić się nie zaszkodzi. Jest to typowy sprzęt przeznaczony do &lt;em&gt;home-recordingu&lt;/em&gt;, co wcale nie musi kojarzyć się z amatorszczyzną. Ze względu na dobre parametry techniczne i stosunkowo dobry stosunek jakości przetworników cyfrowych do ceny, wprawne ucho wyprodukuje płytę CD, udźwiękowienie filmu w żaden sposób nie odbiegające od branżowych standardów (profesjonalnych nagrań).&lt;/p&gt;

&lt;h3 id=&#34;odsłuch:dce4ce542c9f7a851fd046a02392be71&#34;&gt;Odsłuch&lt;/h3&gt;

&lt;p&gt;Za odsłuch służą mi monitory bliskiego pola: &lt;strong&gt;M-Audio BX5 D2&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://zapp1.staticworld.net/reviews/graphics/products/uploaded/maudio_bx5_d2s_speaker_system_1147635_g1.jpg&#34; alt=&#34;M-Audio BX5 D2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Są to monitory aktywne i nie potrzebują osobnego wzmacniacza. Studyjne monitory odsłuchowe wyróżnia spośród innego sprzętu audio charakterystyka częstotliwościowa, która w tym wypadku powinna być jak najbardziej liniowa. Pozwala ona na odsłuch w brzmieniu jak najbardziej zbliżonym do rzeczywistego (źródła dźwięku), tj. bez żadnego podbicia basu, wycięcia środka czy &amp;ldquo;wysokich&amp;rdquo; górek. Dzięki temu tak przygotowany materiał - na &amp;ldquo;surowych&amp;rdquo; głośnikach - powinien zabrzmieć dobrze w dowolnym zestawie Hi-Fi czy iPod&amp;rsquo;ie. Oczywiście nie jest to jedyny warunek jaki trzeba spełnić aby nasz materiał był &amp;ldquo;pro&amp;rdquo;, ale o tym za chwilę.&lt;/p&gt;

&lt;h3 id=&#34;interfejs:dce4ce542c9f7a851fd046a02392be71&#34;&gt;Interfejs&lt;/h3&gt;

&lt;p&gt;Na upratego monitory można podłączyć do komputera bez interfejsu (skręcając kable od biedy), ale to właśnie on odgrywa kluczową rolę jeśli chodzi o jakość dźwięku. Porządny przetwornik C/A (cyfrowo-analogowy) pozwala odtwarzać oraz nagrywać muzykę zapisaną w wysokiej &lt;a href=&#34;https://en.wikipedia.org/wiki/Audio_bit_depth&#34;&gt;rozdzielczości&lt;/a&gt; (np. 24-bit), czyli technicznie zawierającą więcej informacji (bitów) przesłanych/odebranych na sekundę. Jest to nic innego jak próba reprezentacji sygnału analogowego w formie cyfrowej. Przekształcenie to nazywamy &lt;a href=&#34;http://livesound.pl/tutoriale/kursy/4011-technika-cyfrowa-przetwarzanie-analogowo-cyfrowe-kwantowanie&#34;&gt;&lt;strong&gt;kwantyzacją&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://documentation.apple.com/en/finalcutpro/usermanual/Art/L01/L0108_BitGraph.png&#34; alt=&#34;quantization&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Wracając do tematu: do pracy używam interfejsu audio USB: &lt;strong&gt;M-Audio M-Track MKII&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.muzykaitechnologia.pl/website/var/tmp/image-thumbnails/30101/thumb__auto_793e482fec1c54dd5c5708c057c0e7cc/m-track-mkii--3.jpeg&#34; alt=&#34;m-audio m-track mk2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Dołączone sterowniki &lt;a href=&#34;https://en.wikipedia.org/wiki/Audio_Stream_Input/Output&#34;&gt;ASIO&lt;/a&gt; umożliwiają uzyskanie niskiej latencji (bliskiej zeru), dzięki czemu opóźnienia między sprzętem &amp;lt;-&amp;gt; oprogramowaniem są prawie całkowicie wyeliminowane.
Intefrejs ten posiada też wysokiej jakości wejścia mikrofonowe i instrumentalne. Daje to nieograniczone możliwości związane z nagrywaniem sygnału dźwiękowego, który potem ma zostać sklejony w całość (w przeciwieństwie do nagrywania na tzw. &lt;em&gt;&amp;ldquo;setkę&amp;rdquo;&lt;/em&gt;, gdzie każdy muzyk zajmuje osobny kanał i cała kapela nagrywa na żywca). Za często z tej możliwości nie korzystam, ponieważ wszystkie potrzebne ścieżki do odcinka czekają na mnie na GDrive. Jak w końcu umebluję pokój po przeprowadzce na to małe studyjko, to może coś nagram i się podzielę :)&lt;/p&gt;

&lt;h2 id=&#34;software:dce4ce542c9f7a851fd046a02392be71&#34;&gt;Software&lt;/h2&gt;

&lt;p&gt;Obecnie na rynku jest masa edytorów audio. Od prostych i darmowych (&lt;a href=&#34;http://audacityteam.org/&#34;&gt;Audacity&lt;/a&gt;) po bardzo zaawansowane kombajny takie jak: &lt;a href=&#34;http://www.avid.com/US/products/family/pro-tools/&#34;&gt;Pro Tools&lt;/a&gt;, &lt;a href=&#34;http://www.steinberg.net/en/home.html&#34;&gt;Cubase&lt;/a&gt; czy &lt;a href=&#34;https://www.ableton.com/&#34;&gt;Ableton&lt;/a&gt;, które określane są mianem &lt;strong&gt;DAW&lt;/strong&gt; (&lt;em&gt;ang. Digital Audio Workstation&lt;/em&gt;). Z którego narzędzia korzysta producent, to kwestia budżetu, przyzwyczajenia oraz &amp;ldquo;religijności&amp;rdquo; (tak, fan-boy&amp;rsquo;ie każdej technologii są wszędzie!). Ja po paru próbach (udanych bądź mniej) ostatecznie wybrałem swoje ulubione narzędzie pracy, którym jest &lt;a href=&#34;http://www.reaper.fm/&#34;&gt;&lt;strong&gt;Reaper&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;reaper:dce4ce542c9f7a851fd046a02392be71&#34;&gt;Reaper&lt;/h3&gt;

&lt;div style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;https://lh3.googleusercontent.com/-mtompVfMRoU/VNgzXSQUQDI/AAAAAAAAQvo/KD7l2ZHJFqM/s256-no/Cockos%2BREAPER.png&#34; /&gt;
&lt;/div&gt;

&lt;p&gt;Relatywnie tani z potężnymi możliwościami edytor niesamowicie przypadł mi do gustu. Praktycznie podczas każdej edycji odcinka podcasta uczę się czegoś nowego, wymyślam coraz to nowe makra, które automatyzują moją pracę i póki co nie zamieniłbym się na żaden inny edytor :). W następnym poście napiszę o nim więcej.&lt;/p&gt;

&lt;h2 id=&#34;óho:dce4ce542c9f7a851fd046a02392be71&#34;&gt;Óho&lt;/h2&gt;

&lt;p&gt;Najważniejszym elementem jakiegokolwiek studia jest &lt;strong&gt;ucho&lt;/strong&gt; (a nawet dwa). Bez zmysłu muzycznego (i oczywiście sprawnego ucha), nawet z pomocą najlepszego sprzętu i najdroższego programu nie będziemy w stanie dorównać poziomowi profesjonalnym nagrań. W tym wypadku jak w każdej innej branży, a szczególnie naszej - programistycznej - tylko ciężka praca i ciągła praktyka przyniesie wymierne efekty, bo narzędzia to tylko narzędzia.
A ja ciąglę praktykuję i mam nadzieję, że z przyjemnością słucha wam się każdego odcinka &lt;a href=&#34;http://www.devtalk.pl&#34;&gt;DevTalk&amp;rsquo;a&lt;/a&gt; :)&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Audio_bit_depth&#34;&gt;https://en.wikipedia.org/wiki/Audio_bit_depth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://livesound.pl/tutoriale/kursy/4011-technika-cyfrowa-przetwarzanie-analogowo-cyfrowe-kwantowanie&#34;&gt;http://livesound.pl/tutoriale/kursy/4011-technika-cyfrowa-przetwarzanie-analogowo-cyfrowe-kwantowanie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Audio_Stream_Input/Output&#34;&gt;https://en.wikipedia.org/wiki/Audio_Stream_Input/Output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reaper.fm/&#34;&gt;http://www.reaper.fm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.devtalk.pl&#34;&gt;http://www.devtalk.pl&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Koniec odpoczynku</title>
      <link>http://ksmigiel.com/2015/09/koniec-odpoczynku</link>
      <pubDate>Wed, 09 Sep 2015 10:26:38 +0200</pubDate>
      
      <guid>http://ksmigiel.com/2015/09/koniec-odpoczynku</guid>
      <description>

&lt;p&gt;&amp;ldquo;Oficjalne&amp;rdquo; wakacje skończyły się już grubo ponad tydzień temu, a ja ciągle zwlekałem z napisaniem kolejnego posta. Od ostatniego wpisu minęło parę miesięcy i choć nawet nie wiem kiedy ten czas zleciał, to wcale nie znaczy, że nic się w tym okresie nie wydarzyło. Zanim jednak przejdę do konkretów: &lt;strong&gt;Maćkowi Aniserowiczowi&lt;/strong&gt; należą się szczere podziękowania, bo jego ostatni &lt;a href=&#34;http://www.maciejaniserowicz.com/2015/09/01/nowe-rozdanie/&#34;&gt;post&lt;/a&gt; skutecznie zmotywował mnie do &amp;ldquo;pobudki&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;nowa-praca:ef053069fa817c8ab0522a33ed84ec60&#34;&gt;Nowa praca&lt;/h2&gt;

&lt;p&gt;Jak to w karierze programisty bywa, zmiana pracodawcy nie jest niczym zaskakującym. Ta &amp;ldquo;prostota&amp;rdquo; widziana z zewnątrz w rzeczywistości jest trochę bardziej skomplikowana. Nowe środowisko, ludzie, projekt, szefostwo - wystarczająco, aby się trochę postresować. W moim przypadku nawet nie zdążyłem. Trafiłem do świetnego zespołu w kapitalnej &lt;a href=&#34;http://www.mediusflow.com/en&#34;&gt;firmie&lt;/a&gt;, która zrobiła wszystko, aby adaptacja przebiegła bezproblemowo. Jestem bardzo zadowolony z tego ruchu.&lt;/p&gt;

&lt;h2 id=&#34;nowy-sprzęt:ef053069fa817c8ab0522a33ed84ec60&#34;&gt;Nowy sprzęt&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://devtalk.pl/&#34;&gt;DevTalk&lt;/a&gt; przerósł moje oczekiwania. Gdy zaczynałem współpracę z Maćkiem nie wiedziałem, że ta inicjatywa tak dobrze przyjmie się w środowisku programistycznym. Dla mnie jest to też kompromis pomiędzy pasją programowania a muzyką, która towarzyszy mi praktycznie przez całe życie. Czas spędzony przy edycji każdego z odcinków to kapitalna inwestycja w rozwój (mój skill z edycji audio wzrósł 100x, a niektóre fragmenty z nagrania mógłbym recytować - nie raz słuchałem po kilka, kilkanaście razy, żeby brzmiało jak miód na uszy).&lt;/p&gt;

&lt;p&gt;Teraz będzie brzmieć jeszcze lepiej! Moje domowe studyjko zostało wyposażone w nowy sprzęt: profesjonalne monitory odsłuchowe i interfejs audio. W następnym poście zrobię &amp;ldquo;making of&amp;rdquo; pierwszego sezonu, więc będziecie mieli możliwość podpatrzenia w jaki sposób i przy użyciu jakiego sprzętu pracuję :)&lt;/p&gt;

&lt;h2 id=&#34;nowe-wyzwania:ef053069fa817c8ab0522a33ed84ec60&#34;&gt;Nowe wyzwania?&lt;/h2&gt;

&lt;p&gt;W głowie masa pomysłów na posty, pet-projecty. Chciałbym też poudzielać się w projektach open-source. Oby mi tylko na wszystko starczyło czasu. :)&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.maciejaniserowicz.com/2015/09/01/nowe-rozdanie/&#34;&gt;http://www.maciejaniserowicz.com/2015/09/01/nowe-rozdanie/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mediusflow.com/en&#34;&gt;http://www.mediusflow.com/en&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://devtalk.pl/&#34;&gt;http://devtalk.pl/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>TypeScript i pliki definicji</title>
      <link>http://ksmigiel.com/2015/05/jsblocks-dts</link>
      <pubDate>Sat, 23 May 2015 18:18:10 +0200</pubDate>
      
      <guid>http://ksmigiel.com/2015/05/jsblocks-dts</guid>
      <description>

&lt;p&gt;Dzisiaj chciałem przybliżyć kwestię plików definicji do TypeScript. Jeśli zdarzyło wam się pracować z tym językiem, to na pewno wiecie o czym mówię. Jeśli natomiast nie macie pojęcia co to jest - zapraszam do lektury!&lt;/p&gt;

&lt;h2 id=&#34;typescript-typowany-javascript:08ab5ad69c9b5eb0665d1a4bb3fb6240&#34;&gt;TypeScript - typowany JavaScript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; to język kompilowany do JS&amp;rsquo;a prosto od Microsoftu. W wielkim skrócie pozwala na definiowanie typów dla zmiennych, co za tym idzie, deklarowanie klas i interfejsów. Chyba nie trzeba tłumaczyć jakim ułatwieniem staje się taka możliwość w pracy każdego programisty, dla którego środowisko &amp;ldquo;js&amp;rsquo;owe&amp;rdquo; nie jest codziennością, a przychodzi ze świata &amp;ldquo;mocno typowanego&amp;rdquo; (C#, Java, cpp).&lt;/p&gt;

&lt;p&gt;Tworząc tego typu rozwiązanie Microsoft bardzo elegancko zachęca programistów C# do spróbowania swoich sił w tworzeniu aplikacji przy użyciu całego js-stack. Dzięki podobieństwom w składni i modelu OOP (w przeciwieństwie do klasycznego prototypowania w JavaScript) bardzo szybko można zacząć pisać pierwsze sensowne linie kodu, bez potrzeby spędzenia godzin na nauce składni etc. Oczywiście znajomość JS mile widziana, wręcz wskazana. Spójrzcie na różnice w TS &amp;lt;-&amp;gt; JS na przykładzie kompilacji z oficjalnej strony:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// test.ts
class Greeter {
    greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {
        return &amp;quot;Hello, &amp;quot; + this.greeting;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// test.js
var Greeter = (function () {
    function Greeter(message) {
        this.greeting = message;
    }
    Greeter.prototype.greet = function () {
        return &amp;quot;Hello, &amp;quot; + this.greeting;
    };
    return Greeter;
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Powyższy kod jest chyba samowyjaśniającysię. Ta śmieszna funkcja w funkcji wywołana natychmiast to tzw. &lt;a href=&#34;http://en.wikipedia.org/wiki/Immediately-invoked_function_expression&#34;&gt;IIFE&lt;/a&gt;. Popularny wzorzec, must-known.&lt;/p&gt;

&lt;p&gt;TypeScript jest na tyle dojrzały, że nawet Google wraz z jego &lt;a href=&#34;https://angular.io/&#34;&gt;Angular 2.0&lt;/a&gt; postanowili wprowadzić natywne wsparcie dla niego!&lt;/p&gt;

&lt;h2 id=&#34;definitywnie-typowany:08ab5ad69c9b5eb0665d1a4bb3fb6240&#34;&gt;Definitywnie typowany!&lt;/h2&gt;

&lt;p&gt;Zastanawiacie się zapewne w jaki sposób można użyć TypeScript&amp;rsquo;a z istniejącymi już bibliotekami takimi jak: angular, knockout, backbone itd. Otóż istnieje &lt;strong&gt;&lt;a href=&#34;https://github.com/borisyankov/DefinitelyTyped&#34;&gt;repozytorium&lt;/a&gt;&lt;/strong&gt; definicji do przeróżnych frameworków tworzone przez społeczność open source. Sam chcąc bliżej poznać TS postanowiłem udzielić się i puściłem pull requesta z definicjami do &lt;a href=&#34;http://jsblocks.com/&#34;&gt;blocks&lt;/a&gt;. &lt;strong&gt;blocks&lt;/strong&gt; to jeden z wielu frameworków &lt;em&gt;MV*&lt;/em&gt; (dzień bez nowego frameworka js to dzień stracony) jednak zainteresował mnie ze względu na swoją prostotę i połączenie knockout+backbone (observable i modele).&lt;/p&gt;

&lt;h2 id=&#34;blocks-d-ts:08ab5ad69c9b5eb0665d1a4bb3fb6240&#34;&gt;blocks.d.ts&lt;/h2&gt;

&lt;p&gt;Deklaracja typów do istniejącego już kodu odbywa się za pomocą &lt;a href=&#34;http://www.typescriptlang.org/Handbook#modules-working-with-other-javascript-libraries&#34;&gt;Ambient External Modules&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;declare var blocks: BlocksStatic;

declare module &amp;quot;blocks&amp;quot; {
    export = blocks;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deklarując moduł w cudzysłowie &amp;ldquo;nadpisujemy&amp;rdquo; oryginalny moduł zaimportowany w pliku z aplikacją:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;/// &amp;lt;reference path=&amp;quot;blocks.d.ts&amp;quot; /&amp;gt;
import blocks = require(&#39;blocks&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jest to całkiem dobra pozycja wyjściowa do otypowania dowolnej biblioteki. Przekonacie się, że całkiem pokaźna ilość bibliotek została już przetłumaczona na TS przeglądając wspomniane wyżej repozytorium.&lt;/p&gt;

&lt;p&gt;TS automagicznie scala oryginalną bibliotekę z naszą definicją typów. Od teraz mamy piękny IntelliSense podpowiadający składnię, parametry funkcji i jej zwracaną wartość (patrz &lt;a href=&#34;http://usejsdoc.org/&#34;&gt;jsdoc&lt;/a&gt;) oraz sprawdzanie składni w locie - wszystko prawie jak w C#!&lt;/p&gt;

&lt;p&gt;Na moim &lt;a href=&#34;https://github.com/ksmigiel/DefinitelyTyped/tree/master/blocks&#34;&gt;githubie&lt;/a&gt; znajdziecie źrodła całego pliku definicji. Dokumentacja pochodzi oczywiście z oficjalnej strony autora. Co jak co, ale ta aktywność związana z opisywaniem typów nauczyła mnie TypeScript&amp;rsquo;a i jego zawiłości szybciej i przyjemniej niż nie jedna książka :)&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;http://www.typescriptlang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Immediately-invoked_function_expression&#34;&gt;http://en.wikipedia.org/wiki/Immediately-invoked_function_expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://angular.io/&#34;&gt;https://angular.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/borisyankov/DefinitelyTyped&#34;&gt;https://github.com/borisyankov/DefinitelyTyped&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsblocks.com/&#34;&gt;http://jsblocks.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.typescriptlang.org/Handbook#modules-working-with-other-javascript-libraries&#34;&gt;http://www.typescriptlang.org/Handbook#modules-working-with-other-javascript-libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://usejsdoc.org/&#34;&gt;http://usejsdoc.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ksmigiel/DefinitelyTyped/tree/master/blocks&#34;&gt;https://github.com/ksmigiel/DefinitelyTyped/tree/master/blocks&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Visual Studio Code</title>
      <link>http://ksmigiel.com/2015/05/vs-code</link>
      <pubDate>Thu, 14 May 2015 16:38:00 +0100</pubDate>
      
      <guid>http://ksmigiel.com/2015/05/vs-code</guid>
      <description>

&lt;p&gt;Microsoft na tegorocznej konferencji &lt;strong&gt;//build/&lt;/strong&gt; zaskoczył nas paroma nowinkami. Jeśli nie jesteście na bieżąco polecam zerknąć na &lt;a href=&#34;http://blogs.technet.com/b/uktechnet/archive/2015/04/30/announcements-from-build-2015.aspx&#34;&gt;podsumowanie&lt;/a&gt;. Każdy znajdzie coś dla siebie.&lt;/p&gt;

&lt;h2 id=&#34;vs-code:6d2be7abc42720062e9271b30ee0bbbf&#34;&gt;VS Code&lt;/h2&gt;

&lt;p&gt;Mnie osobiście najbardziej spodobał się edytor &lt;a href=&#34;http://code.visualstudio.com&#34;&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/a&gt;, czyli taki Sublime Text w Microsoftowym wydaniu. W całości oparty na node.js i edytorze &lt;a href=&#34;https://atom.io/&#34;&gt;&lt;strong&gt;Atom&lt;/strong&gt;&lt;/a&gt; od GitHuba, a konkretnie na bibliotece &lt;a href=&#34;https://github.com/atom/electron&#34;&gt;&lt;strong&gt;Electron&lt;/strong&gt;&lt;/a&gt; umożliwiającej pisanie cross-platformowych desktopowych aplikacji w JS/HTML/CSS. Główne cechy wyróżniające Code na tle innych edytorów to m.in.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cross-platformowość (sprawdzałem i faktycznie tak jest! :) )&lt;/li&gt;
&lt;li&gt;debugging aplikacji napisanych w node.js (ASP.NET 5 w przygotowaniu)&lt;/li&gt;
&lt;li&gt;tasks - integracja z popularnymi narzędziami do automatyzacji buildów, testowania i deployowania (Make, Ant, Gulp, Jake, Rake, MSBuild)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://schemastore.org/json/&#34;&gt;JSON schema&lt;/a&gt; - code-completion w plikach konfiguracyjnych JSON&lt;/li&gt;
&lt;li&gt;wsparcie TypeScript (code-completion, &lt;em&gt;&amp;ldquo;go to definition&amp;rdquo;&lt;/em&gt; etc.)&lt;/li&gt;
&lt;li&gt;fuzzy-search - przeszukiwanie plików projektu oraz ustawień edytora (&lt;em&gt;Ctrl+E&lt;/em&gt; i &lt;em&gt;Ctrl-Shift-P&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;parsowanie i podgląd &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; w locie - w ten sposób powstaje ten post :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;W obecnej wersji brakuje mi klawiszologii VIM&amp;rsquo;a (jak się człowiek raz przyzwyczai to potem wszystkie inne skróty klawiszowe wydają się bezsensowne) oraz możliwości tworzenia własnych snippetów, co mam nadzieję zostanie dodane w nadchodzących wydaniach.&lt;/p&gt;

&lt;p&gt;Polecam zapoznać się z tym edytorem. Pomimo wersji &lt;em&gt;Preview&lt;/em&gt; posiada masę fajnych funkcjonalności.&lt;/p&gt;

&lt;h2 id=&#34;monaco:6d2be7abc42720062e9271b30ee0bbbf&#34;&gt;Monaco?&lt;/h2&gt;

&lt;p&gt;Jeśli po ściągnięciu Code&amp;rsquo;a masz wrażenie graniczące z pewnością, że gdzieś już to widziałeś to masz całkowitą rację! Microsoft do jego budowy oprócz wspomnianego Atoma wykorzystał &lt;a href=&#34;http://blogs.msdn.com/b/monaco/archive/2014/06/26/how-to-access-visual-studio-online-monaco-from-the-new-azure-portal.aspx&#34;&gt;&lt;strong&gt;Visual Studio Monaco&lt;/strong&gt;&lt;/a&gt;, które jako rozszerzenie można doinstalować w panelu &lt;strong&gt;Azure&lt;/strong&gt; do dowolnej aplikacji na nim hostowanej. Monaco to webowy edytor w &lt;em&gt;&amp;ldquo;chmurze&amp;rdquo;&lt;/em&gt; zintegrowany z wierszem poleceń (dostęp do &lt;code&gt;node&lt;/code&gt; i &lt;code&gt;npm&lt;/code&gt;). Preinstalowany node.js pozwala na hostowanie aplikacji webowych przy użyciu &lt;a href=&#34;https://github.com/tjanczuk/iisnode&#34;&gt;iisnode&lt;/a&gt;. Może posłużyć jako pomoc podczas szybkiej edycji pliku na serwerze albo jako IDE w chmurze :)&lt;/p&gt;

&lt;p&gt;Od jakiegoś czasu na blogu MSDN zaprzestano informować o jakichkolwiek newsach związanych z rozwojem Monaco. Jednak po konferencji &lt;strong&gt;//build/&lt;/strong&gt; nie mam wątpliwości, że Microsoft szykował się na premierę swojego nowego edytora i tak na prawdę tworzył dwa narzędzia równocześnie (pod spodem są te same bebechy: node.js i WebKit).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;protip: naciśnij F12 w edytorze &lt;strong&gt;Code&lt;/strong&gt; i wszystko jasne!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jestem ciekawy czy w przyszłości te dwa projekty staną się jednym tworem.&lt;/p&gt;

&lt;h2 id=&#34;changes-changes-everywhere:6d2be7abc42720062e9271b30ee0bbbf&#34;&gt;Changes, changes everywhere!&lt;/h2&gt;

&lt;p&gt;Muszę przyznać, że lubię ten &amp;ldquo;nowy Microsoft&amp;rdquo;. Edge, ASP.NET vNext, DNX, Code czy rozwój PowerShella sprawiają, że Windows i jego cały ekosystem stają się bardziej &amp;ldquo;developer-friendly&amp;rdquo;. To chyba dobrze, że chcą przyciągnąc do platformy developerów - w końcu to oni ją tworzą.&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.technet.com/b/uktechnet/archive/2015/04/30/announcements-from-build-2015.aspx&#34;&gt;http://blogs.technet.com/b/uktechnet/archive/2015/04/30/announcements-from-build-2015.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.visualstudio.com&#34;&gt;http://code.visualstudio.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;https://atom.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/atom/electron&#34;&gt;https://github.com/atom/electron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://schemastore.org/json/&#34;&gt;http://schemastore.org/json/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;http://daringfireball.net/projects/markdown/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.msdn.com/b/monaco/archive/2014/06/26/how-to-access-visual-studio-online-monaco-from-the-new-azure-portal.aspx&#34;&gt;http://blogs.msdn.com/b/monaco/archive/2014/06/26/how-to-access-visual-studio-online-monaco-from-the-new-azure-portal.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tjanczuk/iisnode&#34;&gt;https://github.com/tjanczuk/iisnode&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>&#34;R&#34;omeo i Julia</title>
      <link>http://ksmigiel.com/2015/03/romeo-i-julia</link>
      <pubDate>Sat, 21 Mar 2015 21:38:00 +0100</pubDate>
      
      <guid>http://ksmigiel.com/2015/03/romeo-i-julia</guid>
      <description>

&lt;p&gt;Każdy wie, że Excel to potężne narzędzie i odpowiednio użyte potrafi wspomóc niejeden proces. Wykorzystywany namiętnie w korporacjach do analizy danych i oglądania filmów (tak tak, pewien użytkownik reddita świetnie ominął wszelkie zabezpieczenia i wykorzystując klasyczne &lt;strong&gt;Windows API&lt;/strong&gt; - metodę &lt;code&gt;mciSendStringA&lt;/code&gt; w &lt;strong&gt;winmm.dll&lt;/strong&gt; - napisał player w VBA&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:184eed10b603a390c6ed60fbfa35091e:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:184eed10b603a390c6ed60fbfa35091e:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;!). Niestety większość arkuszy to prawdziwe potwory, które potrafią śnić się po nocach: przedziwne zagnieżdżone formuły, pstrokate kolorki. Nie da się tym w żaden sposób zarządzać. Niedebugowalne, nietestowalne i niekontrolowersjowalne. Oczywiście dopiero od pewnego stopnia.&lt;/p&gt;

&lt;h2 id=&#34;r-na-r-atunek:184eed10b603a390c6ed60fbfa35091e&#34;&gt;R na R-atunek!&lt;/h2&gt;

&lt;p&gt;Jeśli ktoś nie słyszał o pakiecie &lt;strong&gt;R&lt;/strong&gt;, to koniecznie musi zerknąć na to coś.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:184eed10b603a390c6ed60fbfa35091e:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:184eed10b603a390c6ed60fbfa35091e:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; R jest równocześnie językiem programowania i środowiskiem przeznaczonym do obliczeń statystycznych i wizualizacji. Istnieje bardzo duże prawdopodobieństwo, że jeśli potrzebujesz obliczyć jakąś skomplikowaną statystykę, przeprowadzić test na zbiorze danych, dopasować rozkład, wyestymować cokolwiek i ładnie to zaprezentować na wykresach, to jak egzotycznej metody byś nie wybrał ktoś na pewno stworzył taki pakiet i udostępnił go na stronach &lt;strong&gt;CRAN&lt;/strong&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:184eed10b603a390c6ed60fbfa35091e:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:184eed10b603a390c6ed60fbfa35091e:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; - repozytorium pakietów R (co prawda strona nie zachęca i wygląda jakby czas stanął w miejscu od 1997 roku, ale to tylko złudzenie). Projekt jest bardzo aktywny i jest to jedno z najpopularniejszych narzędzi do analizy danych w tym momencie.&lt;/p&gt;

&lt;p&gt;Pomimo imponującej bazy pakietów, R nie jest idealny. Składnia tego języka dla programisty jest po prostu dziwna i nieintuicyjna. Może dlatego, że został on stworzony z myślą o ułatwieniu pracy statystykom i analitykom. Jego wydajność również nie powala. Jednak świetnie sprawdza się jako narzędzie &amp;ldquo;analizy wstępnej&amp;rdquo;, a skomplikowane obliczenia lepiej wykonywać w innym środowisku (np. Pythonie).&lt;/p&gt;

&lt;h2 id=&#34;i-julia:184eed10b603a390c6ed60fbfa35091e&#34;&gt;I ♥ Julia&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Julia&lt;/strong&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:184eed10b603a390c6ed60fbfa35091e:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:184eed10b603a390c6ed60fbfa35091e:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; to powiew świeżości w świecie statystycznego R i szybkiego Pythona. Relatywnie młody język (pojawił się w 2012 roku), który chciałby je zastąpić w wszelkiej maści aplikacjach i obliczeniach naukowych. Można go opisać w skrócie:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;szybki&lt;/strong&gt; jak C/Fortran&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;elegancki&lt;/strong&gt; jak Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Community szybko zaczęło tworzyć nowe biblioteki i pomimo braku wersji finalnej (w momencie pisania 0.3.6) można próbować swoich sił w tworzeniu aplikacji lub rozwijaniu ekosystemu. Osobiście nie zalecałbym używania Julii na produkcji, bo do wersji 1.0 zapewne całkowicie się zmieni, ale do odważnych świat należy :) Julia nie jest projektem dojrzałym, aczkolwiek śledząc jego rozwój można twierdzić, że rokuje całkiem nieźle.
Młoda, ładna, szybka i atrakcyjna - po prostu &lt;strong&gt;sexy&lt;/strong&gt;! Zresztą sami zobaczcie co potrafi:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ksmigiel.com/images/julia.gif&#34; alt=&#34;gif&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Zainteresowanym polecam ciekawe IDE&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:184eed10b603a390c6ed60fbfa35091e:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:184eed10b603a390c6ed60fbfa35091e:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;, którego ficzery widać powyżej.
Możliwość wykonywania kodu w locie to mój faworyt! Fajnie byłoby móc nazwać siebie &lt;em&gt;Julia Programmer&lt;/em&gt;, więc jak nabardziej kibicuję Julii.&lt;/p&gt;

&lt;h2 id=&#34;gdzie-ta-historia-miłosna:184eed10b603a390c6ed60fbfa35091e&#34;&gt;Gdzie ta historia miłosna?&lt;/h2&gt;

&lt;p&gt;Nie ma. Jak na razie nasz &amp;ldquo;R&amp;rdquo;omeo i Julia żyją i mają się dobrze. Byleby tylko nie skończyło się jak u Szekspira&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:184eed10b603a390c6ed60fbfa35091e:1&#34;&gt;&lt;a href=&#34;http://www.reddit.com/r/excel/comments/2jtd2f/worked_on_a_completely_locked_down_machine_time/&#34;&gt;http://www.reddit.com/r/excel/comments/2jtd2f/worked_on_a_completely_locked_down_machine_time/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:184eed10b603a390c6ed60fbfa35091e:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:184eed10b603a390c6ed60fbfa35091e:2&#34;&gt;&lt;a href=&#34;http://www.r-project.org/&#34;&gt;http://www.r-project.org/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:184eed10b603a390c6ed60fbfa35091e:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:184eed10b603a390c6ed60fbfa35091e:3&#34;&gt;&lt;a href=&#34;http://cran.r-project.org/mirrors.html&#34;&gt;http://cran.r-project.org/mirrors.html&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:184eed10b603a390c6ed60fbfa35091e:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:184eed10b603a390c6ed60fbfa35091e:4&#34;&gt;&lt;a href=&#34;http://julialang.org/&#34;&gt;http://julialang.org/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:184eed10b603a390c6ed60fbfa35091e:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:184eed10b603a390c6ed60fbfa35091e:5&#34;&gt;&lt;a href=&#34;http://junolab.org/&#34;&gt;http://junolab.org/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:184eed10b603a390c6ed60fbfa35091e:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hadoop Streaming w F#</title>
      <link>http://ksmigiel.com/2015/02/hadoop-streaming</link>
      <pubDate>Tue, 17 Feb 2015 21:51:00 +0100</pubDate>
      
      <guid>http://ksmigiel.com/2015/02/hadoop-streaming</guid>
      <description>

&lt;p&gt;Klasyczny Hadoop posiada zestaw klas Javowych, dzięki którym możemy napisać swoje pierwsze zadanie &lt;strong&gt;MapReduce&lt;/strong&gt;. Jak zaglądniecie do &lt;a href=&#34;http://hadoop.apache.org/docs/r1.2.1/mapred_tutorial.html&#34;&gt;dokumentacji&lt;/a&gt;, to przekonacie się, że nie jest to najwygodniejsze rozwiązanie, ale świetnie nadaje się jako materiał do nauki. Przy zastosowaniach produkcyjnych zdecydowanie lepiej zwrócić się w stronę narzędzi takich jak &lt;a href=&#34;https://hive.apache.org/&#34;&gt;Hive&lt;/a&gt;, &lt;a href=&#34;http://pig.apache.org/&#34;&gt;Pig&lt;/a&gt; czy &lt;a href=&#34;https://github.com/twitter/scalding&#34;&gt;Scalding&lt;/a&gt;. Za pomocą specyficznej dla każdego składni można tworzyć zaawansowane analizy bez potrzeby pisania kodu low-level w Javie, np. &lt;strong&gt;HiveQL&lt;/strong&gt; jest językiem zbliżonym do SQL, a &lt;strong&gt;Pig Lating&lt;/strong&gt; ciekawym językiem proceduralnym. Oba są kompilowane do zadań MapReduce. W tym poście skupię się na czymś pośrodku, czyli &lt;strong&gt;Hadoop Streaming&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;streaming-api:7428b1f511329ebc1011ee8ee83894f8&#34;&gt;Streaming API&lt;/h2&gt;

&lt;p&gt;Hadoop Streaming jest częścią dystrybucji Hadoop. Pozwala na tworzenie zadań w dowolnym języku (nawet skryptowym). Warunek jaki trzeba spełnić, to utworzenie dwóch plików wykonywalnych (Mapper i Reducer), które wartości zczytują z &lt;strong&gt;stdin&lt;/strong&gt;, a przetworzone odpowiednio dane wypisują do konsoli (&lt;strong&gt;stdout&lt;/strong&gt;). Jak tytuł posta wskazuje zaimplementowałem je w F#. Dopiero raczkuję w świecie programowania funkcyjnego, dlatego z chęcią przyjmę komentarze odnośnie poprawności kodu. Za przykładowe zadanie MapReduce posłuży nam standardowy &lt;strong&gt;word count&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&#34;mapper-fs:7428b1f511329ebc1011ee8ee83894f8&#34;&gt;Mapper.fs&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System
open System.IO

module Mapper =

  [&amp;lt;EntryPoint&amp;gt;]
  let main argv = 
    let chars =
      [| &#39; &#39;; &#39;.&#39;; &#39;,&#39;; &#39;!&#39;; &#39;;&#39;; &#39;?&#39;; &#39;|&#39;; &#39;-&#39;; &#39;{&#39;; &#39;}&#39;; &#39;:&#39;; &#39;(&#39;; &#39;)&#39; |]

    match argv.Length with
    | 1 -&amp;gt; Console.SetIn(new StreamReader(argv.[0]))
    | _ -&amp;gt; ()

    let isWord w =
      let n = ref 0
      not (Int32.TryParse(w, n))

    let output (word:string) =
      Console.WriteLine(&amp;quot;{0}\t{1}&amp;quot;, word.Trim(), 1)

    Seq.initInfinite (fun _ -&amp;gt; Console.ReadLine())
    |&amp;gt; Seq.takeWhile (fun line -&amp;gt; line &amp;lt;&amp;gt; null)
    |&amp;gt; Seq.iter (fun (line : string) -&amp;gt; 
      line.ToLower().Split(chars, StringSplitOptions.RemoveEmptyEntries)
      |&amp;gt; Seq.filter isWord
      |&amp;gt; Seq.iter output )
    0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zamiast posługiwać się pętlą przy odczytywaniu streamu z stdin wykorzystałem funkcję &lt;code&gt;Seq.initInfinite()&lt;/code&gt;, która wykonuje się aż do spełnienia warunku zdefiniowanego w &lt;code&gt;Seq.takeWhile()&lt;/code&gt;. Do konsoli wypisujemy parę &amp;ldquo;&lt;strong&gt;klucz&lt;/strong&gt; &lt;strong&gt;wartość&lt;/strong&gt;&amp;rdquo; oddzielone znakiem &lt;strong&gt;tabulacji&lt;/strong&gt;. Ponieważ interesuje nas zliczanie słów, jako wartość wychodzącą z Mappera podajemy &lt;strong&gt;1&lt;/strong&gt;, czyli&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;word    1
count    1
example    1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;itd. Reducer otrzymuje posortowany już stream takich par i powinien zwracać dane w ten sam sposób, natomiast w miejsce wartości wstawiamy sumę dla danego słowa (klucza).&lt;/p&gt;

&lt;h4 id=&#34;reducer-fs:7428b1f511329ebc1011ee8ee83894f8&#34;&gt;Reducer.fs&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System
open System.IO

module Reducer =

  [&amp;lt;EntryPoint&amp;gt;]
  let main argv = 
    match argv.Length with
    | 1 -&amp;gt; Console.SetIn(new StreamReader(argv.[0]))
    | _ -&amp;gt; ()

    let currentWord = ref String.Empty
    let count = ref 0

    Seq.initInfinite (fun _ -&amp;gt; Console.ReadLine())
    |&amp;gt; Seq.takeWhile (fun line -&amp;gt; line &amp;lt;&amp;gt; null)
    |&amp;gt; Seq.iter (fun line -&amp;gt;
      let splitted = line.Split(&#39;\t&#39;)
      let word = (splitted.[0])

      match (word) with
      | word when word = !currentWord -&amp;gt;
        incr count
      | _ -&amp;gt;
        if !currentWord &amp;lt;&amp;gt; String.Empty then
          Console.WriteLine(&amp;quot;{0}\t{1}&amp;quot;, !currentWord, !count)
        count := 1
        currentWord := word)
    |&amp;gt; ignore
    Console.WriteLine(&amp;quot;{0}\t{1}&amp;quot;, !currentWord, !count)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hdp:7428b1f511329ebc1011ee8ee83894f8&#34;&gt;HDP&lt;/h2&gt;

&lt;p&gt;Hortonworks Data Platform (HDP) to gotowa dystrybucja Hadoopa, która zawiera preinstalowane i skonfigurowane narzędzia takie jak &lt;strong&gt;Hadoop&lt;/strong&gt;, &lt;strong&gt;Hive&lt;/strong&gt;, &lt;strong&gt;Pig&lt;/strong&gt;, &lt;strong&gt;HBase&lt;/strong&gt;, &lt;strong&gt;Ambari&lt;/strong&gt;, &lt;strong&gt;Cascading&lt;/strong&gt;, &lt;strong&gt;Oozie&lt;/strong&gt; czy &lt;strong&gt;Zookeeper&lt;/strong&gt; &lt;a href=&#34;http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.2.0/Getting_Started_v22/media/01-RawContent/Getting%20Started/Full%20View.png&#34;&gt;(architektura HDP)&lt;/a&gt;. Ogólnie polecam rozwiązania firmy &lt;a href=&#34;http://hortonworks.com/&#34;&gt;Hortonworks&lt;/a&gt; - naprawdę świetnej jakości tutoriale i narzędzia. Chcąc poeksperymentować mamy dwie opcje do wyboru &lt;a href=&#34;http://hortonworks.com/hdp/downloads/&#34;&gt;(downloads)&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;instalacja HDP&lt;/li&gt;
&lt;li&gt;uruchomienie maszyny wirtualnej (sandbox)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wypóbowałem obydwie, ale na potrzeby tego posta skorzystam z sandboxa. Działa na systemie &lt;strong&gt;CentOS&lt;/strong&gt;, także podstawowa wiedza z systemów &lt;strong&gt;Unix&lt;/strong&gt; bardzo się przyda.  Instalacja i konfiguracja HDP na Windowsie to temat nadający się na osobnego posta.&lt;/p&gt;

&lt;h2 id=&#34;mono:7428b1f511329ebc1011ee8ee83894f8&#34;&gt;mono&lt;/h2&gt;

&lt;p&gt;Musimy sami doinstalować &lt;code&gt;mono&lt;/code&gt; i kompilator &lt;code&gt;fsharpc&lt;/code&gt;, żeby binarki Hadoopa mogły wykonać z terminala skompilowane pliki .exe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install mono
sudo yum install fsharp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Teraz wystarczy skompilować nasze pliki:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fsharpc Mapper.fs
fsharpc Reducer.fs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i możemy zacząc prawdziwą zabawę :)&lt;/p&gt;

&lt;h2 id=&#34;hello-world-dla-big-data-czyli-word-count:7428b1f511329ebc1011ee8ee83894f8&#34;&gt;Hello world dla Big Data, czyli word count&lt;/h2&gt;

&lt;p&gt;Nie przez przypadek wybrałem zliczanie słów jako przykład. Jest to swoisty &amp;ldquo;Hello world!&amp;rdquo; w świecie przetwarzania danych. Zliczymy 10 najczęściej występujących słów (dłuższych niż 3 litery, aby pozbyć się &amp;ldquo;się&amp;rdquo; i &amp;ldquo;aby&amp;rdquo;) w powieści &lt;strong&gt;Krzyżacy&lt;/strong&gt; Henryka Sienkiewicza. Wszystkie pliki i skrypty znajdziecie na moim &lt;a href=&#34;https://github.com/ksmigiel/hadoop-streaming-fharp&#34;&gt;githubie&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Uruchomienie joba odbywa się za pomocą komendy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadoop jar /usr/hdp/current/hadoop-mapreduce-client/hadoop-streaming.jar
    -files mapper.sh, reducer.sh, Mapper.exe, Reducer.exe
    -input /user/ksmigiel/krzyzacy.txt
    -output /users/ksmigiel/output
    -mapper mapper.sh
    -reducer reducer.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;mapper.sh&lt;/strong&gt; i &lt;strong&gt;reducer.sh&lt;/strong&gt; to skrypty, które wykonują polecenie &lt;code&gt;mono [exe]&lt;/code&gt;.
Input i output to ścieżka na HDFS, dlatego trzeba skopiować plik za pomocą &lt;code&gt;hdfs dfs -copyFromLocal &amp;lt;src&amp;gt; &amp;lt;dest&amp;gt;&lt;/code&gt;.
Jeśli będziecie chcieli użyć dowolnego pliku tekstowego, pamiętajcie o kodowaniu w UTF-8 i konwersji znaków nowej linii za pomocą &lt;code&gt;dos2unix&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I jeszcze na zakończenie skrypcik &lt;strong&gt;Pig&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;words = load &#39;/user/ksmigiel/out/part-00000&#39; using PigStorage() as (word:chararray, count:int);
words_long = filter words by size(word) &amp;gt; 3;
words_ordered = order words_long by count desc;
top10 = limit words_ordered 10;
dump top10;
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
  &lt;a href=&#34;https://plot.ly/~ksmigiel/17/&#34; target=&#34;_blank&#34; title=&#34;Krzyżacy word count&#34; style=&#34;display: block; text-align: center;&#34;&gt;&lt;img src=&#34;https://plot.ly/~ksmigiel/17.png&#34; alt=&#34;Krzyżacy word count&#34; style=&#34;max-width: 100%;width: 564px;&#34;  width=&#34;564&#34; onerror=&#34;this.onerror=null;this.src=&#39;https://plot.ly/404.png&#39;;&#34; /&gt;&lt;/a&gt;
  &lt;script data-plotly=&#34;ksmigiel:17&#34; src=&#34;https://plot.ly/embed.js&#34; async&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;h2 id=&#34;podsumowanie:7428b1f511329ebc1011ee8ee83894f8&#34;&gt;Podsumowanie&lt;/h2&gt;

&lt;p&gt;Stawianie pierwszych kroków z Hadoopem i jego przyległościami wymaga paru wolnych chwil. Jeśli nie macie doświadczenia z linuxowym terminalem, poruszanie się po sandboxie i jego obsługa mogą być kłopotliwe. Co prawda HDP udostępnia przyjemny interfejs webowy, z poziomu którego można uruchamiać zadania MapReduce napisanie w Pig lub HiveQL (jeszcze raz polecam tutoriale Hortonworks), ale chcąc poznać podstawy tej technologii dobrze jest zacząć od &amp;ldquo;niskiego poziomu&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MapReduce - wstęp</title>
      <link>http://ksmigiel.com/2015/01/map-reduce</link>
      <pubDate>Fri, 23 Jan 2015 18:16:13 +0100</pubDate>
      
      <guid>http://ksmigiel.com/2015/01/map-reduce</guid>
      <description>

&lt;p&gt;Zapewne słyszeliście o &lt;strong&gt;MapReduce&lt;/strong&gt;, a jeśli nie, to teraz macie okazję poczytać. &lt;strong&gt;MapReduce&lt;/strong&gt; jest frameworkiem służącym do przetwarzania dużych zbiorów danych w sposób zrównoleglony. Ostatnimi czasy stał się bardzo popularny dzięki platformom takim jak &lt;a href=&#34;http://hadoop.apache.org&#34;&gt;Hadoop&lt;/a&gt; (o nim w kolejnym poście) czy &lt;a href=&#34;https://spark.apache.org&#34;&gt;Spark&lt;/a&gt;. Wykorzystywany jest wszędzie tam, gdzie dane liczy się w terabajtach. Duże firmy produkują dużo danych, więc znajduje on zastosowanie np. w Google czy Spotify.&lt;/p&gt;

&lt;h2 id=&#34;funkcyjnie:d6a86094d7ff3310f4dae7e5d0b58f2e&#34;&gt;Funkcyjnie&lt;/h2&gt;

&lt;p&gt;Na początku chciałem wspomnieć o dwóch ważnych rzeczach: &lt;code&gt;map()&lt;/code&gt; i &lt;code&gt;reduce()&lt;/code&gt;. Te dwie funkcje, które są elementami języków funkcyjnych (choć np. C# ma swoje odpowiedniki w LINQ: &lt;code&gt;Select()&lt;/code&gt; i &lt;code&gt;Aggregate()&lt;/code&gt;) działają w analogiczny sposób do MapReduce, tyle że na kolekcjach. Tak więc nazwa nie wzięła się znikąd.&lt;/p&gt;

&lt;h4 id=&#34;f-35:d6a86094d7ff3310f4dae7e5d0b58f2e&#34;&gt;F&amp;#35;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;map()&lt;/code&gt; aplikuje funkcję dla każdego elementu z kolekcji:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let sample = [1; 2; 3; 4; 5]
// Dodamy do każdego elementu listy &amp;quot;2&amp;quot;
List.map (fun x -&amp;gt; x + 2) sample
(* val it : int list = [3; 4; 5; 6; 7] *)
// lub bardziej funkcyjnie przy pomocy operatora &amp;quot;|&amp;gt;&amp;quot;
sample |&amp;gt; List.map (fun x -&amp;gt; x + 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt; natomiast jak się można domyślić: redukuje naszą kolekcję przy użyciu akumulatora przekazując wynik do następnego wywołania:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Zredukujemy naszą listę obliczając sumę ze wszystkich jej elementów
// a i b są sąsiadami
sample |&amp;gt; List.reduce (fun a b -&amp;gt; a + b)
(* val it : int = 15 *)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c-35:d6a86094d7ff3310f4dae7e5d0b58f2e&#34;&gt;C&amp;#35;&lt;/h4&gt;

&lt;p&gt;I analogicznie przy użyciu LINQ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var sample = new List&amp;lt;int&amp;gt;() {1, 2, 3, 4, 5};
sample.Select(x =&amp;gt; x + 2);
sample.Aggregate((a, b) =&amp;gt; a + b);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Operacje te prezentują prosty workflow jaki przeprowadza się na danych i w wersji rozszerzonej jest on wykorzystywany w MapReduce.&lt;/p&gt;

&lt;h2 id=&#34;map-reduce-mapreduce:d6a86094d7ff3310f4dae7e5d0b58f2e&#34;&gt;map() + reduce() -&amp;gt; MapReduce&lt;/h2&gt;

&lt;p&gt;Wprowadźmy kilka pojęć: węzeł &lt;strong&gt;(node)&lt;/strong&gt; to jeden z wielu komputerów biorących udział w tym całym zamieszaniu. Grupa takich komputerów o podobnej do siebie konfiguracji, będących w tej samej sieci nazywa się klastrem &lt;strong&gt;(cluster)&lt;/strong&gt;. To powinno wystarczyć do zrozumienia zasady działania MapReduce, choć ludzie zaznajomieni z tematem prawdopodobnie zamkną przeglądarkę z powodu takiej trywializacji :]&lt;/p&gt;

&lt;p&gt;Proces zazwyczaj odbywa się w 3 etapach: 2 tytułowe i jeden pomocniczy pomiędzy nimi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Map&lt;/strong&gt; - na tym etapie każdy węzeł preparuje dane (np. usuwanie zbędnych rekordów, klasyfikacja poprzez dodanie kluczy itp.)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shuffle&lt;/strong&gt; - dane są tutaj sortowane i w takich grupach przydzielane do odpowiednich węzłów&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reduce&lt;/strong&gt; - następuje agregacja danych na podstawie klucza - oczywiście w sposób równoległy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tak naprawdę każdy z nas (developerów) nie raz w życiu coś zmapredusił. Bo jeśli sprowadzimy ten proces z chmury i skomplikowanej topologii do pojedynczej bazy danych, to okaże się, że ten cały MapReduce to w rzeczywistości można napisać w SQLu:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select id, sum(price)
from products
group by id
order by id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wynik takiego zapytania może być również skutkiem całego procesu MapReduce. I dopóki ilość danych i czas w jakim zapytanie się wykonuje mieszczą się w granicach wymagań biznesu, to wszystko ok! Problem zaczyna się wtedy, gdy wydajność maleje, bo instancje serwerów SQL nie radzą sobie z przetwarzaniem coraz szybciej i ciągle napływających danych. Dlatego głównie ze względu na kwestię wydajności wprowadza się paralelność, co klasyczną analizę danych wybija na wyższy poziom zaawansowania.&lt;/p&gt;

&lt;p&gt;Dane mogą teraz zostać przetworzone szybciej. Coś, co kiedyś trwało, lub ze względu na ograniczenia mocy obliczeniowej było prawie niemożliwe, dziś za pomocą chmury i tego typu technologii pozwala niejako na nowo odkrywać algorytmy uczenia maszynowego, data-miningu. A w jaki sposób to zostanie zaprezentowane.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pierwszy post...</title>
      <link>http://ksmigiel.com/2015/01/pierwszy-post</link>
      <pubDate>Sun, 18 Jan 2015 18:44:12 +0100</pubDate>
      
      <guid>http://ksmigiel.com/2015/01/pierwszy-post</guid>
      <description>&lt;p&gt;Cześć! Pomysł na stworzenie bloga chodził mi już jakiś czas po głowie, ale jak to z pomysłami bywa, trochę czasu upłynęło zanim przeszedłem z fazy planingu do fazy implementacji. Nowy rok wydaje się być idealnym momentem na rozpoczęcie czegoś nowego w swoim życiu, więc korzystając z okazji zarejestrowałem domenę i zacząłem szukać hostingu / platformy blogowej, która by mi odpowiadała. Miałem kiedyś styczność z WordPressem, ale potrzebowałem alternatywy lekkiej, prostej i najlepiej minimalistycznej. W ten sposób natrafiłem na bardzo ciekawe narzędzie: &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; - czyli &lt;em&gt;static website engine&lt;/em&gt;. Istnieje parę podobnych rozwiązań typu &lt;em&gt;Jekyll&lt;/em&gt; i bazujący na nim &lt;em&gt;Octopress&lt;/em&gt;, ale ten Hugo bardzo mi się spodobał i spędziłem nad nim trochę czasu rozgryzając go, doprowadzając bloga do stanu obecnego.&lt;/p&gt;

&lt;p&gt;Prawdopodobnie jak większość podobnych blogów, tak i ten powstał po to, aby dokumentować swoją pracę i przy okazji pomóc innym szukającym odpowiedzi na pytanie, których nie ma na stackoverflow. Zawsze narzekałem na brak swojej prywatnej dokumentacji, szczególnie wtedy, gdy nie mogłem sobie przypomnieć rozwiązania problemu, który już kiedyś rozwiązałem. Liczę więc na to, że blog zwiększy moją i Waszą produktywność :)&lt;/p&gt;

&lt;p&gt;Posty będą o różnej tematyce: &lt;strong&gt;webdev&lt;/strong&gt; (.NET, js, MVC, REST API), &lt;strong&gt;data science&lt;/strong&gt; i &lt;strong&gt;big data&lt;/strong&gt; (no-sql, Hadoop, machine learning, AI, statystyka, ekonometria), &lt;strong&gt;programowanie funkcyjne&lt;/strong&gt; (F#), &lt;strong&gt;dobre praktyki&lt;/strong&gt; i &lt;strong&gt;protipy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Jak zrealizuję chociaż 50% z tematów, które zamierzam poruszyć na ten rok to będzie sukces! A jak znajdą się czytelnicy, to i artykuły się znajdą.&lt;/p&gt;

&lt;p&gt;Miłego czytania!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O mnie</title>
      <link>http://ksmigiel.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ksmigiel.com/about/</guid>
      <description>&lt;p&gt;Zawodowo jestem programistą w &lt;a href=&#34;http://www.mediusflow.com/en&#34;&gt;Medius&lt;/a&gt;.
Uwielbiam poznawać nowe technologie, dlatego ciągle poszerzam swój warsztat programistyczny o nowinki ze świata szeroko pojętego &amp;ldquo;dev&amp;rdquo;.
Moje zainteresowania ciągną się od webdev po data science, i na tym blogu poruszanie się po tych dziedzinach będę opisywać :)&lt;/p&gt;

&lt;p&gt;Prywatnie natomiast grywam na skrzypcach w paru zespołach oraz bawię się edytorami audio (mixing, mastering, czyli wszystko co związane z przetwarzaniem dźwięku). Mam na swoim koncie zrealizowaną płytę zespołu &lt;em&gt;Egos&lt;/em&gt;, której utwory były grane na antenie m.in Polskiego Radia 3, Radia Kraków i Radiofonii &lt;a href=&#34;https://www.youtube.com/watch?v=n6HWnGmQ3z0&#34;&gt;(posłuchaj)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Z połączenia tych dwóch pasji wynikła ciekawa inicjatywa: pomoc przy realizacji jedynego programistycznego podcasta w Polsce - &lt;a href=&#34;http://devtalk.pl&#34;&gt;DevTalk.pl&lt;/a&gt;, którego autorem jest &lt;a href=&#34;http://www.maciejaniserowicz.com&#34;&gt;Maciej Aniserowicz&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;W skrócie określiłbym siebie po prostu jako artysta - programista. To chyba najlepiej mnie opisuje: programy komponuję, a utwory kompiluję.&lt;/p&gt;

&lt;p&gt;Po bardziej szczegółowe informacje na mój temat zapraszam na profil LinkedIn:&lt;br /&gt;
&lt;a href=&#34;http://pl.linkedin.com/pub/krzysztof-%C5%9Bmigiel/a5/197/701&#34; style=&#34;text-decoration:none;&#34;&gt;&lt;span style=&#34;font: 80% Arial,sans-serif; color:#0783B6;&#34;&gt;&lt;img src=&#34;https://static.licdn.com/scds/common/u/img/webpromo/btn_in_20x15.png&#34; width=&#34;20&#34; height=&#34;15&#34; alt=&#34;View Krzysztof Śmigiel&#39;s LinkedIn profile&#34; style=&#34;vertical-align:middle;&#34; border=&#34;0&#34;&gt;&amp;nbsp;View my profile&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>