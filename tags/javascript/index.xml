<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on DevOops adventures</title><link>https://ksmigiel.com/tags/javascript/</link><description>Recent content in javascript on DevOops adventures</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 11 Jun 2016 11:59:09 +0100</lastBuildDate><atom:link href="https://ksmigiel.com/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Filtry Blooma</title><link>https://ksmigiel.com/posts/bloom-filters/</link><pubDate>Sat, 11 Jun 2016 11:59:09 +0100</pubDate><guid>https://ksmigiel.com/posts/bloom-filters/</guid><description>Dzisiaj będzie trochę bardziej nisko poziomowo (nie mylić z niższym poziomem posta). Postaram się w przystepny sposób przybliżyć wam czym jest Filtr Blooma i jak można go zaimplementować w JavaScripcie.
Filtra teorie Filtr Blooma to struktura danych pozwalająca w sposób szybki i pamięciowo optymalny odpowiedzieć na pytanie, czy dany element znajduje się w zbiorze. Niestety, ponieważ nie ma nic za darmo, za wydajność musimy zapłacić, a zapłatą będzie błąd w jaki struktura może nas wprowadzić.</description></item><item><title>Kontekst i 'this' w JavaScripcie</title><link>https://ksmigiel.com/posts/js-this/</link><pubDate>Wed, 30 Mar 2016 21:59:09 +0100</pubDate><guid>https://ksmigiel.com/posts/js-this/</guid><description>Słówko this, mimo podobieństwa do C# czy Javy, w JavaScripcie działa trochę inaczej niż nam się może wydawać. Kontekst na jaki wskazuje this może być dowolnie zmieniany, a jego nieumiejętne użycie spowodowuje wystąpienie masy błędów w naszej aplikacji. Ustrzec przed nimi można się jedynie rozumiejąc do czego owe this służy i jak się z nim obchodzić. Zapraszam do lektury :)
Implicit binding Mamy tutaj do czynienia z kontekstem zwykłych obiektów. Złota zasada w identyfikacji kontekstu to:</description></item></channel></rss>